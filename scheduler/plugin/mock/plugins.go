// Code generated by MockGen. DO NOT EDIT.
// Source: plugins.go

// Package mock_plugin is a generated GoMock package.
package mock_plugin

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockstore is a mock of store interface.
type Mockstore struct {
	ctrl     *gomock.Controller
	recorder *MockstoreMockRecorder
}

// MockstoreMockRecorder is the mock recorder for Mockstore.
type MockstoreMockRecorder struct {
	mock *Mockstore
}

// NewMockstore creates a new mock instance.
func NewMockstore(ctrl *gomock.Controller) *Mockstore {
	mock := &Mockstore{ctrl: ctrl}
	mock.recorder = &MockstoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstore) EXPECT() *MockstoreMockRecorder {
	return m.recorder
}

// AddFilterResult mocks base method.
func (m *Mockstore) AddFilterResult(namespace, podName, nodeName, pluginName, reason string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFilterResult", namespace, podName, nodeName, pluginName, reason)
}

// AddFilterResult indicates an expected call of AddFilterResult.
func (mr *MockstoreMockRecorder) AddFilterResult(namespace, podName, nodeName, pluginName, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilterResult", reflect.TypeOf((*Mockstore)(nil).AddFilterResult), namespace, podName, nodeName, pluginName, reason)
}

// AddNormalizedScoreResult mocks base method.
func (m *Mockstore) AddNormalizedScoreResult(namespace, podName, nodeName, pluginName string, normalizedscore int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddNormalizedScoreResult", namespace, podName, nodeName, pluginName, normalizedscore)
}

// AddNormalizedScoreResult indicates an expected call of AddNormalizedScoreResult.
func (mr *MockstoreMockRecorder) AddNormalizedScoreResult(namespace, podName, nodeName, pluginName, normalizedscore interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNormalizedScoreResult", reflect.TypeOf((*Mockstore)(nil).AddNormalizedScoreResult), namespace, podName, nodeName, pluginName, normalizedscore)
}

// AddScoreResult mocks base method.
func (m *Mockstore) AddScoreResult(namespace, podName, nodeName, pluginName string, score int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddScoreResult", namespace, podName, nodeName, pluginName, score)
}

// AddScoreResult indicates an expected call of AddScoreResult.
func (mr *MockstoreMockRecorder) AddScoreResult(namespace, podName, nodeName, pluginName, score interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddScoreResult", reflect.TypeOf((*Mockstore)(nil).AddScoreResult), namespace, podName, nodeName, pluginName, score)
}
